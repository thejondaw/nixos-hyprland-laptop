name: CI - Create/Update API

concurrency:
 group: ${{ github.workflow }}-${{ github.ref }}
 cancel-in-progress: true

on:
 workflow_dispatch:
 push:
   branches: ["master", "stage", "develop"]
   paths:
     - "apps/api/**"
     - ".github/workflows/ci-api.yaml"
     - "sonar-project.properties"

env:
 DOCKER_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/devops-api
 WORKING_DIRECTORY: apps/api

jobs:
 lint:
   runs-on: ubuntu-latest
   timeout-minutes: 5
   steps:
     - uses: actions/checkout@v3

     - uses: actions/setup-node@v3
       with:
         node-version: "14"
         cache: 'npm'
         cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

     - name: Install & Lint
       working-directory: ${{ env.WORKING_DIRECTORY }}
       continue-on-error: true # Skip errors because application is a test one
       run: |
         npm install
         npm run lint
         npm run format:check

 test:
   needs: lint
   runs-on: ubuntu-latest
   timeout-minutes: 10
   strategy:
     fail-fast: false
     matrix:
       test-type: [unit, integration]
   steps:
     - uses: actions/checkout@v3

     - uses: actions/setup-node@v3
       with:
         node-version: "14"
         cache: 'npm'
         cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

     - name: Test with Coverage
       working-directory: ${{ env.WORKING_DIRECTORY }}
       continue-on-error: true # Don't stop when one of tests fails
       run: |
         npm install
         npm test -- --coverage --testMatch='**/${{ matrix.test-type }}/**/*.test.js'

 sonarqube:
   needs: test
   runs-on: ubuntu-latest
   timeout-minutes: 10
   steps:
     - uses: actions/checkout@v3
       with:
         fetch-depth: 0

     - name: Cache SonarCloud packages
       uses: actions/cache@v3
       with:
         path: ~/.sonar/cache
         key: ${{ runner.os }}-sonar
         restore-keys: ${{ runner.os }}-sonar

     - name: SonarCloud Scan
       uses: SonarSource/sonarcloud-github-action@master
       continue-on-error: true # Skipping errors in scanning
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
       with:
         args: >
           -Dsonar.qualitygate.wait=false
           -Dsonar.branch.name=${{ github.ref_name }}
           ${{ github.ref_name != 'master' && format('-Dsonar.branch.target={0}', 'master') || '' }}

 build:
   needs: sonarqube
   runs-on: ubuntu-latest
   timeout-minutes: 15
   if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
   steps:
     - uses: actions/checkout@v3

     - name: Check artifact size
       run: |
         find ${{ env.WORKING_DIRECTORY }} -type f -size +100M | tee large-files.txt
         if [[ -s large-files.txt ]]; then echo "Found large files"; cat large-files.txt; fi

     - name: Set up Docker Buildx
       uses: docker/setup-buildx-action@v2

     - name: Login to Docker Hub
       uses: docker/login-action@v2
       with:
         username: ${{ secrets.DOCKERHUB_USERNAME }}
         password: ${{ secrets.DOCKERHUB_TOKEN }}

     - name: Build and push
       uses: docker/build-push-action@v4
       with:
         context: ${{ env.WORKING_DIRECTORY }}
         push: true
         tags: |
           ${{ env.DOCKER_REPO }}:${{ github.sha }}
           ${{ env.DOCKER_REPO }}:${{ github.ref == 'refs/heads/master' && 'latest' || github.ref == 'refs/heads/stage' && 'stage' || 'develop' }}
         cache-from: type=registry,ref=${{ env.DOCKER_REPO }}:buildcache
         cache-to: type=registry,ref=${{ env.DOCKER_REPO }}:buildcache,mode=max

 trivy:
   needs: build
   runs-on: ubuntu-latest
   timeout-minutes: 10
   steps:
     - name: Run Trivy vulnerability scanner
       uses: aquasecurity/trivy-action@master
       continue-on-error: true # Skipping errors in scanning
       with:
         image-ref: "${{ env.DOCKER_REPO }}:${{ github.sha }}"
         format: "table"
         ignore-unfixed: true
         vuln-type: "os,library"
         severity: "CRITICAL,HIGH"
